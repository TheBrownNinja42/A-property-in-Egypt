import datetime

expenses_list = [] # List to store the expenses.
organized_expenses = {} # Dictionary to store the expenses organized by category.

# Function to add a new expense.
def add_expense(category, amount, date):
    # Creates a dictionary for the expense which hold the information about it category, amount of money, and date. 
    expense = {
        'Category': category,
        'Amount': amount,
        'Date': date
    }
    expenses_list.append(expense) # Adds the expense to the global expenses list.

# Organizes all expenses by category.
def view_organized_expenses():
    organized_expenses.clear() # Prevents any overlapping in expenses.
    
    if not expenses_list: # Checks for lack of expenses.
        print("No expenses found.")
        return
        
    # Organize expenses by category by accessing each key and its value (expense and its information) and adding it to the organized expenses dictionary. If the category is not a duplicate; unique from others, it is put into a new list before being added to the organized expenses dictionary to separate categories.
    for expense in expenses_list:
        category = expense['Category']
        if category not in organized_expenses:
            organized_expenses[category] = []  # Initialize an empty list for this category.
        organized_expenses[category].append(expense)  # Add expense to the category list.

    # Display organized expenses by category (key) from each list made and numbering them along with showing their coresponding amount and date.
    for category, expenses in organized_expenses.items():
        print(f"Category: {category}")
        for i, expense in enumerate(expenses, 1):
            print(f" {i}. Amount: {expense['Amount']}$, Date: {expense['Date'].strftime('%Y-%m-%d')}")

def remove_expenses():

    if not expenses_list:
        print("No expenses available to delete.")
        return

    # Group expenses by category
    categories = {}
    for i, expense in enumerate(expenses_list):
        category = expense['Category']
        if category not in categories:
            categories[category] = []
        categories[category].append((i, expense))  # Store index and expense

    # Display categories to the user
    print("\nSelect a category to delete an expense from:")
    for i, category in enumerate(categories.keys(), 1):
        print(f"{i}. {category}")

    # Get category choice from the user
    while True:
        try:
            category_choice = int(input()) - 1
            if category_choice < 0 or category_choice >= len(categories):
                print("Invalid category choice.")
            else:
                break
        except ValueError:
            print("Please enter a valid number for the category.")
                
            
    # Get the selected category
    selected_category = list(categories.keys())[category_choice]

    # Display expenses in the selected category
    print(f"\nExpenses in '{selected_category}' category:")
    for i, (expense_index, expense) in enumerate(categories[selected_category], 1):
        print(f"{i}. Amount: {expense['Amount']}$, Date: {expense['Date']}")

    while True:
        try:
         # Ask the user which expense to delete
            expense_num = int(input("Enter the number of the expense to delete: "))
            if 1 <= expense_num <= len(expenses_list):
        # Remove the selected expense
                number_of_deleted_expense = categories[selected_category][expense_num - 1][0]

        # Remove the selected expense from expenses_list
                deleted_expense = expenses_list.pop(number_of_deleted_expense)
                print(f"Expense '{deleted_expense['Category']} - {deleted_expense['Amount']}$ on {deleted_expense['Date']}' deleted successfully!")
                break
            
            else:
                print("Invalid expense number.")
        except ValueError:
            print("Please enter a valid number for the expense.")

# Function to generate a montly summary of expenses.
def get_monthly_summary():
    # Dictionary to store montly expense summaries.
    monthly_expenses = {}

    # Loop through each expense in the global expenses list.
    for expense in expenses_list:
        month_year = expense['Date'].strftime('%m-%Y') 

        # If this month/year is not already in the summary, initialize it.
        if month_year not in monthly_expenses:
            monthly_expenses[month_year] = {
                'total': 0,
                'categories': {}
            }

            # Add the current expense's amount to the total for this month/year.
            monthly_expenses[month_year]['total'] += float(expense['Amount'])

            # Get the category of the current expense.
            category = expense['Category']

            # If this category is not already in the summary, initialize it.
            if category not in monthly_expenses[month_year]['categories']:
                monthly_expenses[month_year]['categories'][category] = 0
            # Add the current expense's amount to it category total.
            monthly_expenses[month_year]['categories'][category] += float(expense['Amount'])

    # Display the montly expense summary dictionary.
    return monthly_expenses

def display_summary(expenses):
    total = 0
    categories = {}

    # Group expenses by category and calculate the total for each category
    for expense in expenses_list:
        category = expense['Category']
        amount = float(expense['Amount'])

        if category not in categories:
            categories[category] = 0
        categories[category] += amount
        total += amount

    print("\n--- Expense Summary ---")

    # Display each category's total
    for category, amount in categories.items():
        print(f"{category.capitalize()}: ${amount:.2f}")

    # Print the total expenses across all categories
    print(f"Total Expenses: ${total:.2f}")

# Function to check if the user's input is a valid number. 
def price_check(x):
    try:
        price = float(x)
        return True
    except ValueError:
        return False

# Main function that runs the whole expense tracker.
def expense_tracker():
    while True: # Displays all options and asks user for their number input through 1 to 5.
        print("Welcome to our expense tracker! What would you like to do today (please input a number)?")
        print("1. View all expenses")
        print("2. Add an expense")
        print("3. Delete an expense")
        print("4. Caluculate expenses")
        print("5. View Monthly Summary")
        choice = input()

        if choice == "1": # Shows all expenses by category.
            view_organized_expenses()

        elif choice == "2": # Asks user for category, amount, and date of their new expense and add it to the global expenses list.
            print("Add a new expense")
            category = input("Enter category: ").title()
            while True:
                amount = input("Enter amount: ")
                if price_check(amount): # Checks if the user's input is a valid number.
                    float(amount)
                    while True:
                        date_str = input("Enter date (YYYY-MM-DD): ")
            
                        try: # Ensures the user's input is a valid date.
                            date = datetime.datetime.strptime(date_str, "%Y-%m-%d")
                        except ValueError:
                            print("Invalid date format. Please enter the date in YYYY-MM-DD format.")
                            continue

                        add_expense(category, amount, date)
                        print("Expense added successfully!\n")
                        break
                    break

                else:
                    print("Invalid amount. Please enter a valid number.")

        elif choice == "3": # Asks the user to remove an expense based of a specific category. User inputs a number after picking a specific category that corresponds to an expense, deleting it.
            remove_expenses()

        elif choice == "4": # Calculates the total expenses for each category and displays it.
            display_summary(expenses_list)

        elif choice == "5": # Calculates summaries of monthly expenses.
            monthly_summary = get_monthly_summary()
            for month, data in monthly_summary.items():
                print(f"\nMonth: {month}")
                print(f"Total expenses: ${data['total']:.2f}")
                print("Breakdown by category:")
                for category, amount in data['categories'].items():
                    print(f"  {category}: ${amount:.2f}")


        else:
          print("Input valid number")

expense_tracker()
